name: NPM Publish Prerelease

on:
  workflow_call:
    inputs:
      type:
        type: string
        description: The prerelease type. Either "premajor", "preminor", or "prepatch"
        required: true
      dist-tags:
        type: string
        description: A stringified JSON array of the dist-tags to apply.
        required: true
    secrets:
      npm-token:
        description: The NPM token required to publish the package.
        required: true
    outputs:
      package-name:
        value: ${{ jobs.npm-publish-prerelease.outputs.package-name }}
        description: The name of the processed package.
      version:
        value: ${{ jobs.npm-publish-prerelease.outputs.version }}
        description: The version of the released package.
      dist-tags:
        value: ${{ jobs.npm-publish-prerelease.outputs.dist-tags }}
        description: The stringified JSON array of dist-tags applied.
      links:
        value: ${{ jobs.npm-publish-prerelease.outputs.links }}
        description: |
          A stringified JSON array of markdown links to the released package's registry versions of the form:
          [
            "[<package-identifier>](<version-registry-url>)"
          ]

permissions:
  contents: read

jobs:
  npm-publish-prerelease:
    runs-on: ubuntu-22.04
    outputs:
      package-name: ${{ steps.npm-publish.outputs.package-name }}
      version: ${{ steps.npm-publish.outputs.version }}
      dist-tags: ${{ steps.npm-publish.outputs.dist-tags }}
      links: ${{ steps.npm-publish.outputs.links }}
    steps:
      - name: Parse inputs
        run: |
          allowed_versions=(premajor preminor prepatch)
          if test -z "$(echo ${allowed_versions[@]} | fgrep -w "${{ inputs.type }}")"; then
            echo "Invalid type input! Expected one of ${allowed_versions[@]}"
            exit 1
          fi
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
      # Packaging can require some dependencies. Like tsc if we're building, for example.
      - name: Install dependencies
        run: npm ci
      - name: Get package info
        id: get-package-info
        shell: bash
        run: |
          package_json=$(jq -c '.' package.json)
          package_name=$(echo $package_json | jq -r '.name')
          package_version=$(echo $package_json | jq -r '.version')
          
          echo "prerelease-prefix=$(npm get preid)" >> "${GITHUB_OUTPUT}"
          echo "package-name=${package_name}" >> "${GITHUB_OUTPUT}"
          echo "package-version=${package_version}" >> "${GITHUB_OUTPUT}"
      - name: Get prerelease lineage
        id: semver-increment
        uses: docker://public.ecr.aws/infrastructure-blocks/semver-increment-action:v1
        with:
          version: ${{ steps.get-package-info.outputs.package-version }}
          type: ${{ inputs.type }}
          prerelease-prefix: ${{ steps.get-package-info.outputs.prerelease-prefix }}
      - name: Check if lineage exists
        id: check-lineage-exists
        run: |
          lineage=${{ steps.semver-increment.outputs.version }}
          package_name=${{ steps.get-package-info.outputs.package-name }}
          release=${{ steps.semver-increment.outputs.major }}.${{ steps.semver-increment.outputs.minor }}.${{ steps.semver-increment.outputs.patch }}
          
          # First, check if package exists or lineage exists.
          if ! npm show ${package_name}@">=${lineage} <${release}" 1>/dev/null 2>&1; then
            # When the package exists, we simply bump the value from the package.json
            echo "exists=false" >> "${GITHUB_OUTPUT}"
            exit 0
          fi

          # Then we check to see if the lineage exists, by finding the highest possible match.
          # NPM show will give us the list of prereleases ordered semantically. We just have to reverse it and get the first element.
          # NPM show will either return a single string of an array at this point, even if json is selected.
          # When --json is turned off, the behavior is equivalently confusing, where it will return the version when
          # there is only one matching, or a sequence of <package-name> <version> when there are several.
          # If any case, we prefer the json version and make a special case in our jq filter.
          versions=$(npm show --json ${package_name}@">=${lineage} <${release}" version)          
          latest_prerelease=$(echo $versions | jq 'if type == "array" then .[] else . end' -r | tac | head -1)
          
          if test -z "${latest_prerelease}"; then
            # When the lineage isn't there, we simply pick the result of the semver increment.
            echo "exists=false" >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          
          # Otherwise, we return the latest prerelease so it can be bumped once more!
          echo "exists=true" >> "${GITHUB_OUTPUT}"
          echo "lineage-latest=${latest_prerelease}" >> "${GITHUB_OUTPUT}"
      - if: ${{ steps.check-lineage-exists.outputs.exists == 'true' }}
        name: Bump lineage latest prerelease
        id: bump-lineage-latest
        uses: docker://public.ecr.aws/infrastructure-blocks/semver-increment-action:v1
        with:
          version: ${{ steps.check-lineage-exists.outputs.lineage-latest }}
          type: prerelease
      - name: NPM version & publish
        id: npm-publish
        env:
          NPM_TOKEN: ${{ secrets.npm-token }}
        run: |
          # If the prerelease lineage already existed
          if test -n "${{ steps.bump-lineage-latest.outputs.version }}"; then
            version=${{ steps.bump-lineage-latest.outputs.version }}
          # Otherwise, it's simply the result of the version bump on the package version.
          else
            version=${{ steps.semver-increment.outputs.version }}
          fi
                    
          package_name=${{ steps.get-package-info.outputs.package-name }}
          
          # Release and tag with every provided dist-tag.
          mapfile -t dist_tags < <(echo '${{ inputs.dist-tags }}' | jq '.[]' -r)          
          # For prerelease packages, we don't actually create & push git commits.
          npm version ${version} --no-git-tag-version
          npm publish --tag ${dist_tags[0]}
          
          for dist_tag in ${dist_tags[@]:1}; do
            npm dist-tag add "${package_name}@${version}" ${dist_tag}          
          done
          
          # Generate links.
          declare -a links_text=("[${package_name}@${version}](https://www.npmjs.com/package/${package_name}/v/${version})")
          for dist_tag in ${dist_tags[@]}; do
            links_text+=("[${package_name}@${dist_tag}](https://www.npmjs.com/package/${package_name}/v/${dist_tag})")
          done
          links_json=$(printf "%s\n" ${links_text[@]} | jq -Rnc '[inputs]')
          
          # Outputs
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
          echo "package-name=${package_name}" >> "${GITHUB_OUTPUT}"
          echo "dist-tags=${{ inputs.dist-tags }}" >> "${GITHUB_OUTPUT}"
          echo "links=${links_json}" >> "${GITHUB_OUTPUT}"
